```{r}
library(dplyr)
library(ggplot2)
```

```{r}
source("src/loading_data.R")
```

Xprime représente les covariables utilisées pour l'effet causal pour toute la population, si les unités se trouvaient dans le groupe traitement.

Hypothèse d'homoscédasticité ($\sigma_1=\sigma_2=\sigma$) et de covariance diagonale entre les contrefactuels traités et contrôles.
```{r}
regFun <- function(Yobs, group, X, XPrime = X, subset = NULL)
{
  N <- length(Yobs)
  
  p <- ncol(X)
  # pPrime <- ncol(XPrime)
  
  # On renomme les variables qui sont utilisées uniquement
  # pour le calcul de l'effet
  colnames(XPrime) <- paste(colnames(XPrime), "_delta", sep = "")
  
  # Regroupement de toutes les covariables
  dataEstim <- dataEval <- cbind(X, XPrime)
  
  # Passage à zéro des données supplémentaires pour
  # l'échantillon de contrôle pour l'évaluation
  quantVarsPrime <- colnames(XPrime)[vapply(XPrime, is.numeric, logical(1L))]
  qualVarsPrime <- setdiff(colnames(XPrime), quantVarsPrime)
  dataEval[group == "Control", quantVarsPrime] <- 0.0
  dataEval[group == "Control", qualVarsPrime] <- "0"
  
  dataEval$Yobs <- Yobs
  
  model <- lm(Yobs ~ .,
              data = dataEval, 
              singular.ok = FALSE,
              subset = subset)
  
  
  Ycontrol <- ifelse(group == "Control", Yobs, NA_real_)
  Ytreated <- ifelse(group == "Treated", Yobs, NA_real_)
  
  dataEstim <- dataEstim %>% 
    mutate_if(is.factor, function(v) as.integer(v) - 1L) %>% 
    mutate(intercept = 1.0, .before = 1L) %>% 
    as.matrix()
  
  coefs <- coef(model)
  
  # On nullifie / ne considère pas les coefficients associés 
  # à l'impact causal (ceux associés à XPrime) pour le groupe contrôle
  
  YcontrolEstim <- dataEstim[, seq_len(p + 1L)] %*% coefs[seq_len(p + 1L)]
  YtreatedEstim <- dataEstim %*% coefs
  
  list(model = model,
       Ycontrol = Ycontrol, 
       Ytreated = Ytreated, 
       YcontrolEstim = YcontrolEstim, 
       YtreatedEstim = YtreatedEstim)
}
```

# Régression linéaire multiple classique

```{r}
modelLin <- regFun(dataObs$RE78, dataObs$group, dataObs[, listCovariates])
```

```{r}
group <- dataObs$group
(modelLin$Ycontrol - modelLin$YcontrolEstim) %>% mean(na.rm = TRUE)
(modelLin$Ytreated - modelLin$YtreatedEstim) %>% mean(na.rm = TRUE)
```
# Régression sous support commun

```{r}
source("src/calcul_propension.R")
```

Rubin & Imbens (2015), p. 366

```{r}
varianceProp <- propValues * (1.0 - propValues)
invVar <- 1.0 / varianceProp
maxInvVar <- max(invVar)
meanInvVar <- mean(invVar)

maxInvVar <= 2.0 * meanInvVar
```

```{r}
ordInvVar <- sort(invVar)
for (k in seq_along(ordInvVar))
{
  if (k * ordInvVar[k] >= 2.0 * sum(ordInvVar[seq_len(k)]))
  {
    gamma <- ordInvVar[k]
    break
  }
}
```

```{r}
k * unname(ordInvVar[k])
2.0 * sum(ordInvVar[seq_len(k)])
```


```{r}
alpha <- 0.5 - sqrt(0.25 - 1.0 / gamma)
```

```{r}
maskTrimming <- alpha <= propValues & propValues <= 1.0 - alpha
```

```{r}
sum(maskTrimming)
sum(maskTrimming[group == "Treated"])
```

Tous les traités ne sont pas conservés.

Problème de rang (en particulier très peu de `Hispanic`) : on laisse tous les traités.
```{r}
maskTrimming[group == "Treated"] <- TRUE
```

```{r}
dataProp <- dataObs %>% 
  select(group) %>% 
  mutate(e = propValues, trimming = maskTrimming)

dataProp %>% 
  filter(maskTrimming) %>% 
  ggplot() + 
  geom_histogram(aes(x = e, colour = group))
```




```{r}
modelTrim <- regFun(dataObs$RE78, dataObs$group, 
                    dataObs[, listCovariates], subset = maskTrimming)
```


# Matching
