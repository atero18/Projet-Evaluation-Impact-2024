```{r}
library(dplyr)
library(ggplot2)
```

```{r}
source("src/loading_data.R")
```

Xprime représente les covariables utilisées pour l'effet causal pour toute la population, si les unités se trouvaient dans le groupe traitement.

Hypothèse d'homoscédasticité ($\sigma_1=\sigma_2=\sigma$) et de covariance diagonale entre les contrefactuels traités et contrôles.

```{r}
set_zero <- function(data, subsetUnits = !logical(nrow(data)), subsetVars = colnames(data))
{
  quantVars <- colnames(data)[vapply(data, is.numeric, logical(1L))]
  quantVars <- intersect(quantVars, subsetVars)
  qualVars <- setdiff(colnames(data), quantVars)
  qualVars <- intersect(qualVars, subsetVars)
  data[subsetUnits, quantVars] <- 0.0
  data[subsetUnits, qualVars] <- "0"
  
  data
}
```


```{r}
factor_to_numeric <- 
  function(factor) as.numeric(levels(factor))[factor]
```

```{r}
mean_factor <- function(factor)
{
  sum(factor == "1") / N
}
```


```{r}
regFun <- function(Yobs, group, X, XPrime = X, subset = NULL)
{
  if (!is.null(subset))
  {
    Yobs <- Yobs[subset]
    group <- group[subset]
    
    XPrime <- XPrime[subset, , drop = FALSE]
    X <- X[subset, , drop = FALSE]
  }
    
  
  N <- length(Yobs)
  
  p <- ncol(X)
  # pPrime <- ncol(XPrime)
  
  quantVars <- colnames(X)[vapply(X, is.numeric, logical(1L))]
  
  order2Terms <- 
  combn(quantVars, 2L, 
        function(x) paste(x, collapse = ":"), simplify = TRUE)

  order2Terms <- c(order2Terms, 
                   paste(quantVars, "^2", sep = ""))
  
  
  # On renomme les variables qui sont utilisées uniquement
  # pour le calcul de l'effet
  colnames(XPrime) <- paste(colnames(XPrime), "_delta", sep = "")
  
  # Regroupement de toutes les covariables
  dataEstimTreated <- dataEval <- cbind(X, XPrime)
  
  # Passage à zéro des données supplémentaires pour
  # l'échantillon de contrôle pour l'évaluation
  quantVarsPrime <- colnames(XPrime)[vapply(XPrime, is.numeric, logical(1L))]
  
  order2TermsPrime <- 
    combn(quantVarsPrime, 2L, 
          function(x) paste(x, collapse = ":"), simplify = TRUE)
  
  order2TermsPrime <- c(order2TermsPrime, 
                        paste(quantVarsPrime, "^2", sep = ""))
  
  
  #qualVarsPrime <- setdiff(colnames(XPrime), quantVarsPrime)
  
  dataEval <- set_zero(dataEval,
                       subsetUnits = (group == "Control"), 
                       subsetVars = colnames(XPrime))
  
  M <- model.matrix(as.formula(paste(" ~ . + ", 
                       paste(c(order2Terms, order2TermsPrime),
                             collapse = " + "))), data = dataEval)
  
  QR <- qr(crossprod(M))
  vars <- QR$pivot[seq_len(QR$rank)]
  keptVars <- rownames(QR$qr)[vars]
  
  order2Terms <- intersect(c(order2Terms, order2TermsPrime), keptVars)
  
  
  formulaProp <- paste("Yobs ~ . + ", 
                       paste(c(order2Terms, order2TermsPrime),
                             collapse = " + ")) %>% 
    as.formula()
  
  M <- model.matrix(formulaProp, data = dataEval)
  invDesignMat <- solve(t(M) %*% M)
  # termsWithDelta <- str_detect(colnames(M), "_delta")
  # invDesignMatDelta <- invDesignMatDelta[termsWithDelta, termsWithDelta]
  
  dataEval$Yobs <- Yobs
  
  
  model <- lm(formulaProp,
              data = dataEval, 
              singular.ok = FALSE)
  
  estimVarYobs <- sum((model$residuals)^2L) / (N - ncol(M))
  
  Ycontrol <- ifelse(group == "Control", Yobs, NA_real_)
  Ytreated <- ifelse(group == "Treated", Yobs, NA_real_)
  
  YtreatedEstim <- predict.lm(model, 
                              newdata = dataEstimTreated, 
                              type = "response")
  
  dataEstimControl <- set_zero(dataEstimTreated, 
                               subsetVars = colnames(XPrime))
  
  YcontrolEstim <- predict.lm(model,
                              newdata = dataEstimControl,
                              type = "response")
  
  # dataEstim <- dataEstim %>% 
  #   mutate_if(is.factor, function(v) as.integer(v) - 1L) %>% 
  #   mutate(intercept = 1.0, .before = 1L) %>% 
  #   as.matrix()
  
  # coefs <- coef(model)
  
  # On nullifie / ne considère pas les coefficients associés 
  # à l'impact causal (ceux associés à XPrime) pour le groupe contrôle
  
  # YcontrolEstim <- dataEstim[, seq_len(p + 1L)] %*% coefs[seq_len(p + 1L)]
  # YtreatedEstim <- dataEstim %*% coefs
  
  list(model = model,
       group = group,
       estimVarYobs = estimVarYobs,
       varCoefs = invDesignMat * estimVarYobs,
       dataEval = dataEval,
       dataComplete = dataEstimTreated,
       Ycontrol = Ycontrol, 
       Ytreated = Ytreated, 
       YcontrolEstim = YcontrolEstim, 
       YtreatedEstim = YtreatedEstim)
}
```


Permet d'utiliser `predict.lm` avec terms sans qu'il rende des données centrées.
```{r}
## Extracted from stats::predict.lm (called by predict.Glm for type='terms')

ucmterms <-
  function (object, newdata, terms = NULL, na.action = na.pass, ...) {
    tt <- terms(object)
    if (missing(newdata) || is.null(newdata)) {
      mm <- X <- model.matrix(object)
      mmDone <- TRUE
      offset <- object$offset
    }
    else {
      Terms <- delete.response(tt)
      m <- model.frame(Terms, newdata, na.action = na.action, 
                       xlev = object$xlevels)
      if (!is.null(cl <- attr(Terms, "dataClasses"))) 
        .checkMFClasses(cl, m)
      X <- model.matrix(Terms, m, contrasts.arg = object$contrasts)
      mmDone <- FALSE
    }
       
    beta <- object$coefficients
    nrp <- num.intercepts(object)   # in rms
    ## If > 1 intercept, remove all but one
    if(nrp > 1) beta <- cbind(beta[1], beta[-(1 : nrp)])
       
    if (!mmDone) {
      mm <- model.matrix(object)
      mmDone <- TRUE
    }
    aa <- attr(mm, "assign")
    ll <- attr(tt, "term.labels")
    hasintercept <- attr(tt, "intercept") > 0L
    if (hasintercept) ll <- c("(Intercept)", ll)
    aaa <- factor(aa, labels = ll)
    asgn <- split(order(aa), aaa)
    if(hasintercept) asgn$"(Intercept)" <- NULL

    nterms <- length(asgn)
    if (nterms > 0) {
      predictor <- matrix(ncol = nterms, nrow = NROW(X))
      dimnames(predictor) <- list(rownames(X), names(asgn))
      for(i in seq.int(1L, nterms, length.out = nterms)) {
        ii <- asgn[[i]]
        predictor[, i] <- X[, ii, drop = FALSE] %*% beta[ii]
      }
      if (!is.null(terms)) predictor <- predictor[, terms, drop = FALSE]
    } else predictor <- matrix(0, NROW(X), 0L)

    attr(predictor, "constant") <- 0

    if (missing(newdata) && ! is.null(na.act <- object$na.action))
      predictor <- napredict(na.act, predictor)

    predictor
}
```


# Régression linéaire multiple classique

```{r}
resLin <- regFun(dataObs$RE78, dataObs$group, dataObs[, listCovariates])
modelLin <- resLin$model
dataEval <- resLin$dataEval
```

```{r}
summary(modelLin)
```

```{r}
group <- dataObs$group
(resLin$Ycontrol - resLin$YcontrolEstim) %>% mean(na.rm = TRUE)
(resLin$Ytreated - resLin$YtreatedEstim) %>% mean(na.rm = TRUE)
```

```{r}
modelAIC <- step(modelLin, trace = 0L)
```

```{r}
summary(modelAIC)
```


```{r}
rm(dataEval)
```

```{r}
mean(resLin$Ytreated - resLin$YcontrolEstim, na.rm = TRUE)
mean(resLin$YtreatedEstim - resLin$Ycontrol, na.rm = TRUE)
```

Estimation ATE sans conditionnement, sans biais si les $z_k$ sont identiquement distribués

```{r}
mean(resLin$YtreatedEstim - resLin$YcontrolEstim)
```

```{r}
XDelta <- set_zero(resLin$dataComplete, subsetVars = listCovariates) %>% 
  model.matrix(modelLin, data = .)

XDelta[, "(Intercept)"] <- 0.0

XMoyDelta <- 
  XDelta %>% 
  apply(MARGIN = 2L, mean)

varDeltaMoy <- t(XMoyDelta) %*% 
  resLin$varCoefs %*% 
  XMoyDelta + t(coef(modelLin)) %*% var(XDelta) %*% coef(modelLin) / nrow(XDelta) 

varDeltaMoy <- varDeltaMoy %>% as.numeric()

varDeltaMoy
```

```{r}
rm(XMoyDelta)
```



# Régression sous support commun

Rubin & Imbens (2015), p. 366

```{r}
source("src/calcul_propension.R")
```

Calcul des variances conditionnelles pour la variable $T_k$.

```{r}
varianceProp <- propValues * (1.0 - propValues)
invVar <- 1.0 / varianceProp
maxInvVar <- max(invVar)
meanInvVar <- mean(invVar)

maxInvVar <= 2.0 * meanInvVar
```

On cherche le premier gamma qui permet que le terme de gauche dépasse le terme de droite.

```{r}
ordInvVar <- sort(invVar)
for (k in seq_along(ordInvVar))
{
  if (k * ordInvVar[k] >= 2.0 * sum(ordInvVar[seq_len(k)]))
  {
    gamma <- ordInvVar[k]
    break
  }
}
```

```{r}
k * unname(ordInvVar[k])
2.0 * sum(ordInvVar[seq_len(k)])
```


```{r}
alpha <- 0.5 - sqrt(0.25 - 1.0 / gamma)
```

```{r}
maskTrimming <- alpha <= propValues & propValues <= 1.0 - alpha
```

```{r}
sum(maskTrimming)
sum(maskTrimming[group == "Treated"])
```

Tous les traités ne sont pas conservés.

Problème de rang (en particulier très peu de `Hispanic`) : on laisse tous les traités.
```{r}
maskTrimming[group == "Treated"] <- TRUE
```

```{r}
dataProp <- dataObs %>% 
  select(group) %>% 
  mutate(e = propValues, trimming = maskTrimming)

dataProp %>% 
  filter(maskTrimming) %>% 
  ggplot() + 
  geom_histogram(aes(x = e, colour = group))
```




```{r}
resTrim <- regFun(dataObs$RE78, dataObs$group, 
                    dataObs[, listCovariates], subset = maskTrimming)
modelTrim <- resTrim$model
```

```{r}
summary(modelTrim)
```

```{r}
dataEval <- resTrim$dataEval
modelTrimAIC <- step(modelTrim, trace = 0L)
rm(dataEval)
```

```{r}
summary(modelTrimAIC)
```


```{r}
mean(resTrim$Ytreated - resTrim$YcontrolEstim, na.rm = TRUE)
mean(resTrim$YtreatedEstim - resTrim$Ycontrol, na.rm = TRUE)
```

Estimation ATE sans biais si $z_k$ identiquement distribués conditionnellement à la présence dans l'intervalle
```{r}
mean(resLin$YtreatedEstim - resLin$YcontrolEstim)
```

```{r}
XDeltaTrim <- set_zero(resTrim$dataComplete,
                   subsetVars = listCovariates)

XDeltaTrim <- model.matrix(modelTrim, data = XDeltaTrim)

XDeltaTrim[, "(Intercept)"] <- 0.0

XMoyDeltaTrim <- 
  XDeltaTrim %>% 
  apply(MARGIN = 2L, mean)

varDeltaMoyTrim <- t(XMoyDeltaTrim) %*% 
  resTrim$varCoefs %*% 
  XMoyDeltaTrim + 
  t(coef(modelTrim)) %*% 
  var(XDeltaTrim) %*% 
  coef(modelTrim) / nrow(XDeltaTrim)

varDeltaMoyTrim <- varDeltaMoyTrim %>% as.numeric()

varDeltaMoyTrim
```

# Matching
